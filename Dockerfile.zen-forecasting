# Production Docker Image for zen-forecasting v1.0
FROM rust:1.88-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    clang \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /usr/src/zen-neural-stack

# Copy workspace configuration
COPY Cargo.toml Cargo.lock ./
COPY zen-forecasting/Cargo.toml ./zen-forecasting/
COPY zen-forecasting/neuro-divergent-core/Cargo.toml ./zen-forecasting/neuro-divergent-core/
COPY zen-forecasting/neuro-divergent-models/Cargo.toml ./zen-forecasting/neuro-divergent-models/
COPY zen-forecasting/neuro-divergent-data/Cargo.toml ./zen-forecasting/neuro-divergent-data/
COPY zen-forecasting/neuro-divergent-registry/Cargo.toml ./zen-forecasting/neuro-divergent-registry/
COPY zen-forecasting/neuro-divergent-training/Cargo.toml ./zen-forecasting/neuro-divergent-training/

# Pre-build dependencies for faster builds
RUN mkdir -p zen-forecasting/src zen-forecasting/neuro-divergent-{core,models,data,registry,training}/src \
    && echo "fn main() {}" > zen-forecasting/src/main.rs \
    && echo "pub fn dummy() {}" > zen-forecasting/src/lib.rs \
    && for crate in core models data registry training; do \
        echo "pub fn dummy() {}" > zen-forecasting/neuro-divergent-${crate}/src/lib.rs; \
    done \
    && cargo build --release --package zen-forecasting \
    && rm -rf zen-forecasting/*/src

# Copy source code
COPY zen-forecasting/ ./zen-forecasting/

# Build production binary
RUN cargo build --release --package zen-forecasting

# Runtime image
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for data processing
RUN pip3 install --no-cache-dir numpy pandas scikit-learn

# Create app user
RUN useradd -r -s /bin/false -m zen-forecasting

# Copy binary and libraries
COPY --from=builder /usr/src/zen-neural-stack/target/release/libzen_forecasting.so /usr/local/lib/
COPY --from=builder /usr/src/zen-neural-stack/target/release/libzen_forecasting.a /usr/local/lib/

# Copy example data and configuration
COPY zen-forecasting/examples/ /opt/zen-forecasting/examples/
COPY zen-forecasting/docs/ /opt/zen-forecasting/docs/

# Update library path
RUN ldconfig

# Set permissions
RUN chown -R zen-forecasting:zen-forecasting /opt/zen-forecasting /usr/local/lib/libzen_forecasting.*

# Switch to app user
USER zen-forecasting

# Working directory
WORKDIR /opt/zen-forecasting

# Expose ports for forecasting API
EXPOSE 4003

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD echo "zen-forecasting ready" || exit 1

# Default command
CMD ["echo", "zen-forecasting v1.0 ready - Production Time Series Forecasting Platform"]