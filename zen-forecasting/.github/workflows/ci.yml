name: Neuro-Divergent CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --workspace --all-features

    - name: Run integration tests
      run: cargo test --test '*' --all-features

    - name: Run doc tests
      run: cargo test --doc --all-features

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate coverage report
      run: cargo llvm-cov --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info
        fail_ci_if_error: true

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/reports/benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Security audit
      uses: actions-rs/audit@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  accuracy:
    name: Accuracy Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install NeuralForecast
      run: |
        pip install neuralforecast
        pip install pandas numpy torch
    
    - name: Generate reference data
      run: python scripts/generate_reference_data.py
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run accuracy tests
      run: cargo test --package neuro-divergent --test accuracy --all-features

  publish:
    name: Publish Crates
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, coverage, benchmark, security, accuracy]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
    
    - name: Publish neuro-divergent-core
      run: |
        cd neuro-divergent-core
        cargo publish --dry-run
        cargo publish
    
    - name: Wait for core to be available
      run: sleep 60
    
    - name: Publish neuro-divergent-data
      run: |
        cd neuro-divergent-data
        cargo publish --dry-run
        cargo publish
    
    - name: Wait for data to be available
      run: sleep 60
    
    - name: Publish neuro-divergent-training
      run: |
        cd neuro-divergent-training
        cargo publish --dry-run
        cargo publish
    
    - name: Wait for training to be available
      run: sleep 60
    
    - name: Publish neuro-divergent-models
      run: |
        cd neuro-divergent-models
        cargo publish --dry-run
        cargo publish
    
    - name: Wait for models to be available
      run: sleep 60
    
    - name: Publish neuro-divergent-registry
      run: |
        cd neuro-divergent-registry
        cargo publish --dry-run
        cargo publish
    
    - name: Wait for registry to be available
      run: sleep 60
    
    - name: Publish neuro-divergent
      run: |
        cargo publish --dry-run
        cargo publish

  documentation:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build documentation
      run: cargo doc --all-features --no-deps
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: neuro-divergent.rs