[package]
name = "zen-neural"
version = "0.1.0"
edition = "2021"
rust-version = "1.88"
authors = ["mikkihugo"]
description = "High-performance neural networks with THE COLLECTIVE integration and Borg coordination"
repository = "https://github.com/mikkihugo/zen-neural-stack"
license = "MIT OR Apache-2.0"
keywords = ["neural-network", "zen-neural", "collective", "borg", "ai"]
categories = ["science", "algorithms", "mathematics"]
exclude = [
    "node_modules/**",
    ".git/**",
    ".claude/**",
    ".vscode/**",
    "target/**",
    "*.lock",
    "*.log",
    "tmp/**",
    "claude-code-flow/**",
    "ruv-swarm/npm/node_modules/**",
    "ruv-swarm/npm/.nyc_output/**",
    "ruv-swarm/npm/coverage/**",
    "ruv-swarm/target/**",
    "*.wasm",
    "*.onnx",
    "*.pt",
    "*.pth",
    "*.safetensors",
    "*.bin",
    ".claude.json",
    "ruv-swarm/npm/**",
    "*.o",
    "*.a",
    "*.so",
    "*.dylib",
    "*.dll",
    "benchmarks/**",
    "docs/**",
    "examples/**",
    "tests/**",
    ".github/**",
    ".gitignore",
    ".gitmodules",
    "ruv-swarm/**"
]

# Part of zen-neural-stack workspace

[lib]
name = "zen_neural"
path = "lib.rs"

[dependencies]
# Core dependencies
serde = { version = "1.0.219", features = ["derive"], optional = true }
serde_json = { version = "1.0.142", optional = true }
thiserror = "2.0.12"
num-traits = "0.2.19"

# Parallel processing
rayon = { version = "1.10.0", optional = true }

# Random number generation
rand = { version = "0.8.5", features = ["small_rng"] }
rand_distr = "0.4.3"
rand_chacha = "0.3.1"

# Memory management
lazy_static = "1.5.0"

# Logging
log = { version = "0.4", optional = true }

# I/O and serialization
bincode = { version = "1.3.3", optional = true }
flate2 = { version = "1.1.2", optional = true }

# Additional dependencies for our implementation  
num_cpus = { version = "1.16", optional = true }

# Concurrent processing dependencies
crossbeam-channel = { version = "0.5.12", optional = true }
crossbeam-utils = { version = "0.8.20", optional = true }

# GPU acceleration dependencies
wgpu = { version = "26.0.1", optional = true }
futures = { version = "0.3.31", optional = true }
pollster = { version = "0.4.0", optional = true }
bytemuck = { version = "1.21.0", features = ["derive"], optional = true }
tokio = { version = "1.47.1", features = ["rt", "sync", "time"], optional = true }
async-trait = "0.1.88"

# Additional dependencies for ndarray operations
ndarray = { version = "0.16.1", features = ["serde"] }
ndarray-rand = "0.15.0"

# Removed distributed/storage dependencies - handled by TypeScript orchestration layer

# WASM dependencies
wasm-bindgen = { version = "0.2.100", optional = true }
js-sys = { version = "0.3.77", optional = true }
web-sys = { version = "0.3.77", features = [
  "Window", "console", "Performance", "Navigator", "Worker", "MessageChannel", "MessagePort",
  "HtmlCanvasElement", "BroadcastChannel", "ServiceWorkerContainer",
  "Gpu", "GpuAdapter", "GpuDevice", "GpuQueue", "GpuBuffer", "GpuTexture", "GpuBindGroup",
  "GpuCanvasContext", "GpuCommandEncoder", "GpuComputePassEncoder", "GpuComputePipeline",
  "MessageEvent", "Storage", "GpuRequestAdapterOptions", "GpuPowerPreference", "GpuDeviceDescriptor",
  "Document", "Element", "CanvasRenderingContext2d", "ImageData"
], optional = true }
console_error_panic_hook = { version = "0.1.7", optional = true }
wasm-bindgen-futures = { version = "0.4.50", optional = true }
getrandom = { version = "0.2.15", features = ["js"] }

[dev-dependencies]
criterion = { version = "0.5.1", features = ["html_reports"] }
proptest = "1.7.0"
approx = "0.5.1"
pretty_assertions = "1.4.1"
tokio = { version = "1.47.1", features = ["macros", "rt", "rt-multi-thread", "time", "process", "sync", "fs"] }
futures = "0.3.31"
uuid = { version = "1.11.0", features = ["v4"] }
anyhow = "1.0.98"
chrono = { version = "0.4.41", features = ["serde"] }

[features]
# Minimal embedded/WASM build (no parallel processing)
default = ["std", "serde", "logging"]
# Desktop/laptop development (parallel enabled)
desktop = ["default", "parallel", "simd"]  
# Server/production build (all features)
server = ["desktop", "concurrent", "binary", "compression", "io", "gnn", "gpu"]
# Full feature set (everything enabled)
full = ["server", "wasm-gpu", "unstable-avx512"]
# Development-optimized features (minimal dependencies for fast builds)
dev-fast = ["std", "serde", "logging"]
# Embedded systems (minimal footprint)
embedded = ["no_std", "serde"]
std = []
serde = ["dep:serde", "dep:serde_json"]
parallel = ["dep:rayon", "dep:num_cpus", "std"]
logging = ["dep:log", "std"]
# Concurrent neural network operations
concurrent = ["parallel", "dep:crossbeam-channel", "dep:crossbeam-utils", "dep:tokio", "std"]
simd = ["parallel", "dep:num_cpus"]
simd-avx2 = ["simd"]
simd-neon = ["simd"]
# Unstable features (requires nightly Rust)
unstable-avx512 = ["simd"]
binary = ["dep:bincode"]
compression = ["dep:flate2"]
io = ["binary", "compression", "serde"]

# no_std support
no_std = []

# WASM support
wasm = ["no_std", "serde", "logging", "dep:wasm-bindgen", "dep:js-sys", "dep:web-sys", "dep:console_error_panic_hook", "dep:wasm-bindgen-futures"]

# GPU acceleration support
gpu = ["dep:wgpu", "dep:futures", "dep:pollster", "dep:bytemuck", "dep:tokio", "std"]
webgpu = ["dep:wgpu", "dep:futures", "dep:bytemuck", "wasm", "logging"]
wasm-gpu = ["webgpu", "wasm"]

# GNN features
gnn = ["std"]
gnn-gpu = ["gnn", "gpu"]

# Removed zen-storage, zen-distributed, zen-collective features
# These capabilities are now handled by the claude-code-zen TypeScript orchestration layer

# Test configurations
test-all = ["gpu", "gnn"]
test-core = ["std", "parallel"]
test-gpu = ["gpu", "webgpu"]
test-no-external = []  # For tests that don't require external crates

# Debug and profiling features
backtrace = ["std"]  # Enable backtrace support in error handling

[[example]]
name = "basic_usage"
path = "examples/basic_usage.rs"
