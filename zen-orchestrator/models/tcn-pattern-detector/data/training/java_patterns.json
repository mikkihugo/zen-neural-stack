[
  {
    "id": "java_builder_1",
    "language": "java",
    "code": "public class Computer {\n    private String CPU;\n    private String GPU;\n    private int RAM;\n    private int storage;\n    private String motherboard;\n    \n    private Computer(ComputerBuilder builder) {\n        this.CPU = builder.CPU;\n        this.GPU = builder.GPU;\n        this.RAM = builder.RAM;\n        this.storage = builder.storage;\n        this.motherboard = builder.motherboard;\n    }\n    \n    public static class ComputerBuilder {\n        private String CPU;\n        private String GPU;\n        private int RAM;\n        private int storage;\n        private String motherboard;\n        \n        public ComputerBuilder setCPU(String CPU) {\n            this.CPU = CPU;\n            return this;\n        }\n        \n        public ComputerBuilder setGPU(String GPU) {\n            this.GPU = GPU;\n            return this;\n        }\n        \n        public ComputerBuilder setRAM(int RAM) {\n            this.RAM = RAM;\n            return this;\n        }\n        \n        public ComputerBuilder setStorage(int storage) {\n            this.storage = storage;\n            return this;\n        }\n        \n        public ComputerBuilder setMotherboard(String motherboard) {\n            this.motherboard = motherboard;\n            return this;\n        }\n        \n        public Computer build() {\n            return new Computer(this);\n        }\n    }\n}",
    "patterns": {
      "design_patterns": ["builder"],
      "anti_patterns": [],
      "refactoring_opportunities": []
    },
    "confidence_scores": {
      "builder": 0.97,
      "factory_pattern": 0.02,
      "prototype": 0.01
    }
  },
  {
    "id": "java_adapter_1",
    "language": "java",
    "code": "// Target interface\ninterface MediaPlayer {\n    void play(String audioType, String fileName);\n}\n\n// Adaptee class\nclass AdvancedMediaPlayer {\n    public void playVlc(String fileName) {\n        System.out.println(\"Playing vlc file. Name: \" + fileName);\n    }\n    \n    public void playMp4(String fileName) {\n        System.out.println(\"Playing mp4 file. Name: \" + fileName);\n    }\n}\n\n// Adapter class\nclass MediaAdapter implements MediaPlayer {\n    AdvancedMediaPlayer advancedMusicPlayer;\n    \n    public MediaAdapter(String audioType) {\n        if (audioType.equalsIgnoreCase(\"vlc\")) {\n            advancedMusicPlayer = new AdvancedMediaPlayer();\n        } else if (audioType.equalsIgnoreCase(\"mp4\")) {\n            advancedMusicPlayer = new AdvancedMediaPlayer();\n        }\n    }\n    \n    @Override\n    public void play(String audioType, String fileName) {\n        if (audioType.equalsIgnoreCase(\"vlc\")) {\n            advancedMusicPlayer.playVlc(fileName);\n        } else if (audioType.equalsIgnoreCase(\"mp4\")) {\n            advancedMusicPlayer.playMp4(fileName);\n        }\n    }\n}\n\n// Context class\nclass AudioPlayer implements MediaPlayer {\n    MediaAdapter mediaAdapter;\n    \n    @Override\n    public void play(String audioType, String fileName) {\n        if (audioType.equalsIgnoreCase(\"mp3\")) {\n            System.out.println(\"Playing mp3 file. Name: \" + fileName);\n        } else if (audioType.equalsIgnoreCase(\"vlc\") || audioType.equalsIgnoreCase(\"mp4\")) {\n            mediaAdapter = new MediaAdapter(audioType);\n            mediaAdapter.play(audioType, fileName);\n        } else {\n            System.out.println(\"Invalid media. \" + audioType + \" format not supported\");\n        }\n    }\n}",
    "patterns": {
      "design_patterns": ["adapter"],
      "anti_patterns": [],
      "refactoring_opportunities": []
    },
    "confidence_scores": {
      "adapter": 0.94,
      "bridge": 0.03,
      "facade": 0.03
    }
  },
  {
    "id": "java_command_1",
    "language": "java",
    "code": "// Command interface\ninterface Command {\n    void execute();\n    void undo();\n}\n\n// Receiver class\nclass Light {\n    private boolean isOn = false;\n    \n    public void turnOn() {\n        isOn = true;\n        System.out.println(\"Light is ON\");\n    }\n    \n    public void turnOff() {\n        isOn = false;\n        System.out.println(\"Light is OFF\");\n    }\n}\n\n// Concrete Commands\nclass LightOnCommand implements Command {\n    private Light light;\n    \n    public LightOnCommand(Light light) {\n        this.light = light;\n    }\n    \n    @Override\n    public void execute() {\n        light.turnOn();\n    }\n    \n    @Override\n    public void undo() {\n        light.turnOff();\n    }\n}\n\nclass LightOffCommand implements Command {\n    private Light light;\n    \n    public LightOffCommand(Light light) {\n        this.light = light;\n    }\n    \n    @Override\n    public void execute() {\n        light.turnOff();\n    }\n    \n    @Override\n    public void undo() {\n        light.turnOn();\n    }\n}\n\n// Invoker class\nclass RemoteControl {\n    private Command[] onCommands;\n    private Command[] offCommands;\n    private Command undoCommand;\n    \n    public RemoteControl() {\n        onCommands = new Command[7];\n        offCommands = new Command[7];\n    }\n    \n    public void setCommand(int slot, Command onCommand, Command offCommand) {\n        onCommands[slot] = onCommand;\n        offCommands[slot] = offCommand;\n    }\n    \n    public void onButtonPressed(int slot) {\n        onCommands[slot].execute();\n        undoCommand = onCommands[slot];\n    }\n    \n    public void offButtonPressed(int slot) {\n        offCommands[slot].execute();\n        undoCommand = offCommands[slot];\n    }\n    \n    public void undoButtonPressed() {\n        undoCommand.undo();\n    }\n}",
    "patterns": {
      "design_patterns": ["command"],
      "anti_patterns": [],
      "refactoring_opportunities": []
    },
    "confidence_scores": {
      "command": 0.96,
      "strategy": 0.02,
      "observer": 0.02
    }
  },
  {
    "id": "java_feature_envy_1",
    "language": "java",
    "code": "public class OrderProcessor {\n    public void processOrder(Order order) {\n        // Feature envy - this method is more interested in Customer data\n        Customer customer = order.getCustomer();\n        \n        if (customer.getAddress().getCountry().equals(\"US\")) {\n            double tax = order.getTotal() * customer.getAddress().getState().getTaxRate();\n            order.setTax(tax);\n        }\n        \n        if (customer.isPremium()) {\n            double discount = order.getTotal() * customer.getPremiumDiscount();\n            order.setDiscount(discount);\n        }\n        \n        if (customer.getPaymentMethod().getType().equals(\"CREDIT_CARD\")) {\n            CreditCard card = (CreditCard) customer.getPaymentMethod();\n            if (card.getExpirationDate().before(new Date())) {\n                throw new RuntimeException(\"Credit card expired\");\n            }\n        }\n        \n        // Send email using customer data\n        String email = customer.getEmail();\n        String name = customer.getFirstName() + \" \" + customer.getLastName();\n        sendConfirmationEmail(email, name, order.getOrderNumber());\n        \n        // Update customer loyalty points\n        int currentPoints = customer.getLoyaltyPoints();\n        int earnedPoints = (int) (order.getTotal() / 10);\n        customer.setLoyaltyPoints(currentPoints + earnedPoints);\n    }\n    \n    private void sendConfirmationEmail(String email, String name, String orderNumber) {\n        // Email sending logic\n    }\n}",
    "patterns": {
      "design_patterns": [],
      "anti_patterns": ["feature_envy"],
      "refactoring_opportunities": ["move_method", "extract_method"]
    },
    "confidence_scores": {
      "feature_envy": 0.91,
      "move_method": 0.88,
      "extract_method": 0.79
    }
  },
  {
    "id": "java_data_clumps_1",
    "language": "java",
    "code": "public class Customer {\n    private String firstName;\n    private String lastName;\n    private String street;\n    private String city;\n    private String state;\n    private String zipCode;\n    private String country;\n    \n    public Customer(String firstName, String lastName, String street, String city, String state, String zipCode, String country) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.zipCode = zipCode;\n        this.country = country;\n    }\n    \n    public void updateAddress(String street, String city, String state, String zipCode, String country) {\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.zipCode = zipCode;\n        this.country = country;\n    }\n    \n    public String getFullAddress() {\n        return street + \", \" + city + \", \" + state + \" \" + zipCode + \", \" + country;\n    }\n}\n\npublic class Order {\n    private String orderNumber;\n    private double total;\n    private String customerFirstName;\n    private String customerLastName;\n    private String shippingStreet;\n    private String shippingCity;\n    private String shippingState;\n    private String shippingZipCode;\n    private String shippingCountry;\n    private String billingStreet;\n    private String billingCity;\n    private String billingState;\n    private String billingZipCode;\n    private String billingCountry;\n    \n    public void setShippingAddress(String street, String city, String state, String zipCode, String country) {\n        this.shippingStreet = street;\n        this.shippingCity = city;\n        this.shippingState = state;\n        this.shippingZipCode = zipCode;\n        this.shippingCountry = country;\n    }\n    \n    public void setBillingAddress(String street, String city, String state, String zipCode, String country) {\n        this.billingStreet = street;\n        this.billingCity = city;\n        this.billingState = state;\n        this.billingZipCode = zipCode;\n        this.billingCountry = country;\n    }\n}",
    "patterns": {
      "design_patterns": [],
      "anti_patterns": ["data_clumps"],
      "refactoring_opportunities": ["extract_class"]
    },
    "confidence_scores": {
      "data_clumps": 0.93,
      "extract_class": 0.95,
      "long_method": 0.15
    }
  }
]