FROM node:18-alpine

# Install required tools
RUN apk add --no-cache git curl bash python3 make g++ sqlite

# Create working directory
WORKDIR /app

# Copy the entire ruv-swarm npm package
COPY . .

# Install dependencies
RUN npm install

# Create test script for onboarding
RUN echo 'import { runOnboardingFlow, DefaultClaudeDetector, DefaultMCPConfigurator } from "./src/onboarding/index.js";' > test-onboarding.js && \
    echo '' >> test-onboarding.js && \
    echo 'console.log("Testing ruv-swarm onboarding integration...");' >> test-onboarding.js && \
    echo '' >> test-onboarding.js && \
    echo 'async function testOnboarding() {' >> test-onboarding.js && \
    echo '  try {' >> test-onboarding.js && \
    echo '    // Test Claude detection' >> test-onboarding.js && \
    echo '    console.log("1. Testing Claude Code detection...");' >> test-onboarding.js && \
    echo '    const detector = new DefaultClaudeDetector();' >> test-onboarding.js && \
    echo '    const claudeInfo = await detector.detect();' >> test-onboarding.js && \
    echo '    console.log(`   Claude installed: ${claudeInfo.installed}`);' >> test-onboarding.js && \
    echo '    console.log(`   Claude path: ${claudeInfo.path || "Not found"}`);' >> test-onboarding.js && \
    echo '    ' >> test-onboarding.js && \
    echo '    // Test MCP configuration' >> test-onboarding.js && \
    echo '    console.log("\\n2. Testing MCP configuration...");' >> test-onboarding.js && \
    echo '    const configurator = new DefaultMCPConfigurator();' >> test-onboarding.js && \
    echo '    try {' >> test-onboarding.js && \
    echo '      const mcpConfig = await configurator.configureForRuvSwarm();' >> test-onboarding.js && \
    echo '      console.log("   MCP configuration generated successfully");' >> test-onboarding.js && \
    echo '      console.log(`   Servers configured: ${Object.keys(mcpConfig.servers).join(", ")}`);' >> test-onboarding.js && \
    echo '    } catch (error) {' >> test-onboarding.js && \
    echo '      console.log(`   MCP configuration error: ${error.message}`);' >> test-onboarding.js && \
    echo '    }' >> test-onboarding.js && \
    echo '    ' >> test-onboarding.js && \
    echo '    // Test non-interactive onboarding flow' >> test-onboarding.js && \
    echo '    console.log("\\n3. Testing non-interactive onboarding flow...");' >> test-onboarding.js && \
    echo '    await runOnboardingFlow({' >> test-onboarding.js && \
    echo '      skipClaudeDetection: false,' >> test-onboarding.js && \
    echo '      skipMcpConfiguration: false,' >> test-onboarding.js && \
    echo '      skipLaunch: true,  // Do not try to launch Claude in Docker' >> test-onboarding.js && \
    echo '      autoLaunch: false' >> test-onboarding.js && \
    echo '    });' >> test-onboarding.js && \
    echo '    ' >> test-onboarding.js && \
    echo '    console.log("\\n✅ Onboarding tests completed successfully!");' >> test-onboarding.js && \
    echo '    ' >> test-onboarding.js && \
    echo '  } catch (error) {' >> test-onboarding.js && \
    echo '    console.error("\\n❌ Onboarding test failed:", error.message);' >> test-onboarding.js && \
    echo '    process.exit(1);' >> test-onboarding.js && \
    echo '  }' >> test-onboarding.js && \
    echo '}' >> test-onboarding.js && \
    echo '' >> test-onboarding.js && \
    echo 'testOnboarding();' >> test-onboarding.js

# Create test script for MCP server
RUN echo 'import { spawn } from "child_process";' > test-mcp-server.js && \
    echo '' >> test-mcp-server.js && \
    echo 'console.log("Testing ruv-swarm MCP server startup...");' >> test-mcp-server.js && \
    echo '' >> test-mcp-server.js && \
    echo '// Test that the MCP server can start' >> test-mcp-server.js && \
    echo 'const mcp = spawn("node", ["bin/ruv-swarm-clean.js", "mcp", "start"], {' >> test-mcp-server.js && \
    echo '  env: { ...process.env, LOG_LEVEL: "INFO" }' >> test-mcp-server.js && \
    echo '});' >> test-mcp-server.js && \
    echo '' >> test-mcp-server.js && \
    echo 'let output = "";' >> test-mcp-server.js && \
    echo 'let errorOutput = "";' >> test-mcp-server.js && \
    echo '' >> test-mcp-server.js && \
    echo 'mcp.stdout.on("data", (data) => {' >> test-mcp-server.js && \
    echo '  output += data.toString();' >> test-mcp-server.js && \
    echo '  process.stdout.write(data);' >> test-mcp-server.js && \
    echo '});' >> test-mcp-server.js && \
    echo '' >> test-mcp-server.js && \
    echo 'mcp.stderr.on("data", (data) => {' >> test-mcp-server.js && \
    echo '  errorOutput += data.toString();' >> test-mcp-server.js && \
    echo '  process.stderr.write(data);' >> test-mcp-server.js && \
    echo '});' >> test-mcp-server.js && \
    echo '' >> test-mcp-server.js && \
    echo '// Wait for initialization message' >> test-mcp-server.js && \
    echo 'setTimeout(() => {' >> test-mcp-server.js && \
    echo '  if (output.includes("server.initialized") || errorOutput.includes("MCP server starting")) {' >> test-mcp-server.js && \
    echo '    console.log("\\n✅ MCP server started successfully!");' >> test-mcp-server.js && \
    echo '    mcp.kill();' >> test-mcp-server.js && \
    echo '    process.exit(0);' >> test-mcp-server.js && \
    echo '  } else {' >> test-mcp-server.js && \
    echo '    console.error("\\n❌ MCP server failed to start properly");' >> test-mcp-server.js && \
    echo '    mcp.kill();' >> test-mcp-server.js && \
    echo '    process.exit(1);' >> test-mcp-server.js && \
    echo '  }' >> test-mcp-server.js && \
    echo '}, 5000);' >> test-mcp-server.js && \
    echo '' >> test-mcp-server.js && \
    echo 'mcp.on("error", (error) => {' >> test-mcp-server.js && \
    echo '  console.error("Failed to start MCP server:", error);' >> test-mcp-server.js && \
    echo '  process.exit(1);' >> test-mcp-server.js && \
    echo '});' >> test-mcp-server.js

# Set CI environment to force non-interactive mode
ENV CI=true
ENV TERM=dumb

CMD ["sh", "-c", "echo '=== Testing Onboarding ===' && node test-onboarding.js && echo '\n=== Testing MCP Server ===' && timeout 10 node test-mcp-server.js"]