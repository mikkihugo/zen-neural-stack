FROM node:18

# Install required tools
RUN apt-get update && apt-get install -y git curl python3 make g++ sqlite3 && rm -rf /var/lib/apt/lists/*

# Create working directory
WORKDIR /app

# Copy the entire ruv-swarm npm package
COPY . .

# Remove node_modules and reinstall to ensure correct binaries
RUN rm -rf node_modules

# Install dependencies
RUN npm install

# Test that the ruv-swarm binary is available
RUN npx ruv-swarm --version || echo "ruv-swarm not available yet"

# Create test script for onboarding without npx requirement
RUN cat > test-onboarding-simple.js << 'EOFSCRIPT'
import { DefaultClaudeDetector, DefaultMCPConfigurator, MCPServerConfig, MCPConfig } from './src/onboarding/index.js';

console.log('Testing ruv-swarm onboarding components...');

async function testOnboardingComponents() {
  try {
    // Test Claude detection
    console.log('1. Testing Claude Code detection class...');
    const detector = new DefaultClaudeDetector();
    console.log('   DefaultClaudeDetector created successfully');
    console.log('   Search paths:', detector.searchPaths.slice(0, 3));
    
    // Test MCP configuration classes
    console.log('\n2. Testing MCP configuration classes...');
    const serverConfig = new MCPServerConfig(
      'node',
      ['bin/ruv-swarm-clean.js', 'mcp', 'start'],
      {},
      true
    );
    console.log('   MCPServerConfig created successfully');
    
    const mcpConfig = new MCPConfig({
      'ruv-swarm': serverConfig
    }, true, true);
    console.log('   MCPConfig created successfully');
    console.log('   Servers configured:', Object.keys(mcpConfig.servers));
    
    // Test configurator
    console.log('\n3. Testing MCP configurator...');
    const configurator = new DefaultMCPConfigurator();
    console.log('   DefaultMCPConfigurator created successfully');
    console.log('   Config dir search complete');
    
    console.log('\n✅ All onboarding components are working correctly!');
    
  } catch (error) {
    console.error('\n❌ Component test failed:', error);
    console.error(error.stack);
    process.exit(1);
  }
}

testOnboardingComponents();
EOFSCRIPT

# Create test for MCP server availability
RUN cat > test-mcp-availability.js << 'EOFSCRIPT2'
import { execSync } from 'child_process';
import { existsSync } from 'fs';

console.log('Testing MCP server availability...');

// Check if the binary exists
const binaryPath = 'bin/ruv-swarm-clean.js';
if (existsSync(binaryPath)) {
  console.log('✅ Binary exists at:', binaryPath);
  
  try {
    const result = execSync('node bin/ruv-swarm-clean.js --version', { encoding: 'utf8' });
    console.log('✅ Binary is executable');
    console.log('   Version:', result.trim());
  } catch (error) {
    console.log('❌ Binary failed to execute:', error.message);
  }
} else {
  console.log('❌ Binary not found at:', binaryPath);
}

// Test MCP server can respond to help
try {
  const helpResult = execSync('node bin/ruv-swarm-clean.js mcp help', { encoding: 'utf8' });
  console.log('✅ MCP help command works');
} catch (error) {
  console.log('❌ MCP help failed:', error.message);
}
EOFSCRIPT2

# Set CI environment to force non-interactive mode
ENV CI=true
ENV TERM=dumb

CMD ["sh", "-c", "echo '=== Testing Component Availability ===' && node test-mcp-availability.js && echo '\n=== Testing Onboarding Components ===' && node test-onboarding-simple.js"]