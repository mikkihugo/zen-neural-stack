version: '3.8'

services:
  # Test 1: MCP Stdio Mode Test
  mcp-stdio-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-stdio-test
    container_name: ruv-swarm-mcp-stdio-test
    environment:
      - NODE_ENV=test
      - MCP_MODE=stdio
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
      - DATABASE_PATH=/app/data/ruv-swarm.db
    volumes:
      - ./test-results/mcp-stdio:/app/test-results
      - ./logs/mcp-stdio:/app/logs
      - mcp-data:/app/data
    command: node docker/test-mcp-stdio.js

  # Test 2: Database Persistence Validator
  db-persistence-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-stdio-test
    container_name: ruv-swarm-db-persistence-test
    environment:
      - NODE_ENV=test
      - DATABASE_PATH=/app/data/ruv-swarm.db
    volumes:
      - ./test-results/db-persistence:/app/test-results
      - mcp-data:/app/data
    command: >
      sh -c "
      echo 'Testing database persistence...'
      node -e \"
      import sqlite3 from 'sqlite3';
      import { open } from 'sqlite';
      
      (async () => {
        const db = await open({
          filename: '/app/data/ruv-swarm.db',
          driver: sqlite3.Database
        });
        
        // Check all tables exist
        const tables = await db.all(
          \\\"SELECT name FROM sqlite_master WHERE type='table'\\\"
        );
        
        console.log('Database tables:', tables.map(t => t.name).join(', '));
        
        // Verify table structure
        for (const table of ['swarms', 'agents', 'tasks', 'neural_states', 'memory', 'daa_agents']) {
          const info = await db.all(\\\"PRAGMA table_info(\\\" + table + \\\")\\\");
          console.log('\\nTable', table, 'has', info.length, 'columns');
        }
        
        await db.close();
      })();
      \"
      "
    depends_on:
      - mcp-stdio-test

  # Test 3: Logger Output Verification
  logger-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-stdio-test
    container_name: ruv-swarm-logger-test
    environment:
      - MCP_MODE=stdio
      - LOG_LEVEL=debug
    volumes:
      - ./test-results/logger:/app/test-results
    command: >
      sh -c "
      echo 'Testing logger output separation...' >&2
      node -e \"
      import { Logger } from './src/logger.js';
      
      const logger = new Logger({ 
        enableStderr: true,
        formatJson: false 
      });
      
      // Test stdout remains clean
      console.log(JSON.stringify({ jsonrpc: '2.0', id: 1, result: 'clean' }));
      
      // Test logs go to stderr
      logger.info('This should go to stderr');
      logger.error('This error should also go to stderr');
      
      // Test different log levels
      logger.trace('Trace message');
      logger.debug('Debug message');
      logger.warn('Warning message');
      logger.fatal('Fatal message');
      \" 2>stderr.log 1>stdout.log
      
      echo '\\nStdout contents:' >&2
      cat stdout.log >&2
      echo '\\nStderr contents:' >&2
      cat stderr.log >&2
      
      # Verify stdout only has JSON-RPC
      if grep -q 'jsonrpc' stdout.log && ! grep -q 'should go to stderr' stdout.log; then
        echo '✅ Stdout is clean' >&2
      else
        echo '❌ Stdout is contaminated' >&2
        exit 1
      fi
      
      # Verify stderr has logs
      if grep -q 'should go to stderr' stderr.log; then
        echo '✅ Logs are in stderr' >&2
      else
        echo '❌ Logs missing from stderr' >&2
        exit 1
      fi
      "

  # Test 4: Error Handling Test
  error-handling-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-stdio-test
    container_name: ruv-swarm-error-handling-test
    environment:
      - MCP_MODE=stdio
      - LOG_LEVEL=debug
    volumes:
      - ./test-results/error-handling:/app/test-results
    command: >
      sh -c "
      echo 'Testing error handling improvements...'
      
      # Test 1: Invalid JSON handling
      echo 'invalid json' | timeout 5 node bin/ruv-swarm-clean.js mcp start 2>error1.log 1>out1.log || true
      
      # Test 2: Missing fields handling
      echo '{\"id\": 1}' | timeout 5 node bin/ruv-swarm-clean.js mcp start 2>error2.log 1>out2.log || true
      
      # Test 3: Database error handling
      DATABASE_PATH=/invalid/path/db.sqlite timeout 5 node bin/ruv-swarm-clean.js mcp start 2>error3.log 1>out3.log || true
      
      echo 'Error handling test completed'
      
      # Check if errors were logged properly
      if grep -q 'error' error*.log; then
        echo '✅ Errors logged properly'
      else
        echo '⚠️  No errors logged'
      fi
      "

  # Test 5: Concurrent Operations Test
  concurrent-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-stdio-test
    container_name: ruv-swarm-concurrent-test
    environment:
      - NODE_ENV=test
      - DATABASE_PATH=/app/data/ruv-swarm.db
    volumes:
      - ./test-results/concurrent:/app/test-results
      - mcp-data:/app/data
    command: >
      sh -c "
      echo 'Testing concurrent database operations...'
      node -e \"
      import sqlite3 from 'sqlite3';
      import { open } from 'sqlite';
      
      (async () => {
        const db = await open({
          filename: '/app/data/ruv-swarm.db',
          driver: sqlite3.Database
        });
        
        // Test concurrent writes
        const promises = [];
        for (let i = 0; i < 50; i++) {
          promises.push(
            db.run(
              'INSERT INTO memory (key, value, created_at, updated_at) VALUES (?, ?, ?, ?)',
              ['concurrent-' + i, JSON.stringify({ test: i }), new Date().toISOString(), new Date().toISOString()]
            )
          );
        }
        
        try {
          await Promise.all(promises);
          console.log('✅ All concurrent writes succeeded');
        } catch (error) {
          console.error('❌ Concurrent write failed:', error.message);
        }
        
        // Verify all writes
        const result = await db.get('SELECT COUNT(*) as count FROM memory WHERE key LIKE ?', 'concurrent-%');
        console.log('Wrote', result.count, 'records concurrently');
        
        // Clean up
        await db.run('DELETE FROM memory WHERE key LIKE ?', 'concurrent-%');
        await db.close();
      })();
      \"
      "
    depends_on:
      - mcp-stdio-test

  # Test 6: Full Integration Test
  integration-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-stdio-test
    container_name: ruv-swarm-integration-test
    environment:
      - NODE_ENV=test
      - MCP_MODE=stdio
      - DATABASE_PATH=/app/data/ruv-swarm.db
      - LOG_LEVEL=info
    volumes:
      - ./test-results/integration:/app/test-results
      - mcp-data:/app/data
    command: >
      sh -c "
      echo 'Running full integration test...'
      
      # Start MCP server in background
      node bin/ruv-swarm-clean.js mcp start 2>server.log &
      SERVER_PID=$!
      
      sleep 3
      
      # Send test commands
      cat <<EOF | node -e \"
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      const messages = [
        { jsonrpc: '2.0', id: 1, method: 'initialize', params: { protocolVersion: '1.0' } },
        { jsonrpc: '2.0', id: 2, method: 'tools/list', params: {} },
        { jsonrpc: '2.0', id: 3, method: 'tools/call', params: { name: 'swarm_init', arguments: { topology: 'mesh' } } },
        { jsonrpc: '2.0', id: 4, method: 'tools/call', params: { name: 'agent_spawn', arguments: { type: 'researcher' } } },
        { jsonrpc: '2.0', id: 5, method: 'tools/call', params: { name: 'memory_usage', arguments: { action: 'store', key: 'test', value: { data: 'integration test' } } } },
        { jsonrpc: '2.0', id: 6, method: 'tools/call', params: { name: 'swarm_status', arguments: {} } }
      ];
      
      messages.forEach(msg => {
        console.log(JSON.stringify(msg));
      });
      
      setTimeout(() => process.exit(0), 1000);
      \"
      EOF
      
      # Give time for processing
      sleep 5
      
      # Kill server
      kill $SERVER_PID 2>/dev/null || true
      
      echo 'Integration test completed'
      
      # Check server log for issues
      if grep -i 'error' server.log; then
        echo '⚠️  Errors found in server log'
      else
        echo '✅ No errors in server log'
      fi
      "
    depends_on:
      - db-persistence-test
      - logger-test

  # Test Report Generator
  report-generator:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp-stdio-test
    container_name: ruv-swarm-report-generator
    volumes:
      - ./test-results:/app/test-results
      - ./reports:/app/reports
    command: >
      sh -c "
      echo 'Generating consolidated test report...'
      
      # Wait for all tests to complete
      sleep 30
      
      # Create consolidated report
      node -e \"
      const fs = require('fs');
      const path = require('path');
      
      const report = {
        title: 'MCP Issue #65 Fixes - Docker Test Report',
        timestamp: new Date().toISOString(),
        tests: []
      };
      
      // Collect all test results
      const dirs = fs.readdirSync('/app/test-results');
      dirs.forEach(dir => {
        const dirPath = path.join('/app/test-results', dir);
        if (fs.statSync(dirPath).isDirectory()) {
          const files = fs.readdirSync(dirPath);
          files.forEach(file => {
            if (file.endsWith('.json')) {
              try {
                const content = fs.readFileSync(path.join(dirPath, file), 'utf8');
                const testResult = JSON.parse(content);
                report.tests.push({
                  suite: dir,
                  ...testResult
                });
              } catch (e) {
                console.error('Failed to read', file, e.message);
              }
            }
          });
        }
      });
      
      // Save consolidated report
      fs.writeFileSync(
        '/app/reports/consolidated-test-report.json',
        JSON.stringify(report, null, 2)
      );
      
      console.log('Test report generated:', '/app/reports/consolidated-test-report.json');
      console.log('Total test suites:', report.tests.length);
      \"
      "
    depends_on:
      - integration-test

volumes:
  mcp-data:

networks:
  default:
    name: mcp-test-network