version: '3.8'

services:
  # MCP Server - Primary instance for reliability testing
  mcp-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mcp.test
    container_name: ruv-swarm-mcp-server
    hostname: mcp-server
    environment:
      - NODE_ENV=test
      - RUST_LOG=debug
      - MCP_TEST_MODE=true
      - MCP_LOG_LEVEL=debug
      - MCP_HEARTBEAT_INTERVAL=5000
      - MCP_CONNECTION_TIMEOUT=30000
      - MCP_MAX_RECONNECT_ATTEMPTS=5
      - MCP_RECONNECT_DELAY=1000
    ports:
      - "3001:3000"
    volumes:
      - ./test-results/mcp-reliability:/app/test-results
      - ./logs/mcp-server:/app/logs
      - mcp-data:/app/data
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - mcp-test-network
    restart: unless-stopped
    mem_limit: 512m
    cpus: 0.5

  # Claude Code Simulator - Simulates Claude Code client behavior
  claude-simulator:
    build:
      context: .
      dockerfile: Dockerfile.claude-simulator
    container_name: ruv-swarm-claude-simulator
    hostname: claude-simulator
    environment:
      - MCP_SERVER_URL=http://mcp-server:3000
      - SIMULATION_MODE=reliability
      - TEST_SCENARIOS=connection,disconnect,reconnect,timeout,heavy-load
      - SESSION_DURATION=3600  # 1 hour sessions
      - REQUEST_INTERVAL=100   # ms between requests
      - FAILURE_INJECTION=true
      - LOG_LEVEL=debug
    volumes:
      - ./test-results/claude-simulator:/app/test-results
      - ./logs/claude-simulator:/app/logs
      - ./scenarios:/app/scenarios:ro
    depends_on:
      - mcp-server
    networks:
      - mcp-test-network
    restart: on-failure
    mem_limit: 256m

  # Network Chaos - Simulates network issues
  network-chaos:
    image: gaiaadm/pumba:latest
    container_name: ruv-swarm-network-chaos
    hostname: network-chaos
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CHAOS_SCENARIOS=latency,packet-loss,disconnect
      - TARGET_CONTAINER=ruv-swarm-mcp-server
      - CHAOS_INTERVAL=300  # Apply chaos every 5 minutes
    command: >
      sh -c "
      while true; do
        echo 'Applying network latency (100ms +/- 50ms)...'
        pumba netem --duration 60s --tc-image gaiadocker/iproute2 delay --time 100 --jitter 50 --correlation 25 ruv-swarm-mcp-server || true
        sleep 120
        
        echo 'Applying packet loss (5%)...'
        pumba netem --duration 30s --tc-image gaiadocker/iproute2 loss --percent 5 ruv-swarm-mcp-server || true
        sleep 120
        
        echo 'Simulating network disconnect...'
        pumba pause --duration 10s ruv-swarm-mcp-server || true
        sleep 120
      done
      "
    networks:
      - mcp-test-network
    depends_on:
      - mcp-server

  # Resource Stress - Simulates high CPU/memory usage
  resource-stress:
    image: progrium/stress
    container_name: ruv-swarm-resource-stress
    hostname: resource-stress
    environment:
      - STRESS_CPU_WORKERS=2
      - STRESS_MEMORY_WORKERS=1
      - STRESS_MEMORY_SIZE=256M
    command: >
      sh -c "
      while true; do
        echo 'Applying CPU stress...'
        stress --cpu 2 --timeout 60s
        sleep 240
        
        echo 'Applying memory stress...'
        stress --vm 1 --vm-bytes 256M --timeout 30s
        sleep 240
      done
      "
    networks:
      - mcp-test-network
    mem_limit: 512m
    cpus: 1.0

  # Monitoring Stack - Prometheus + Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: ruv-swarm-prometheus
    hostname: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mcp-test-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ruv-swarm-grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - mcp-test-network
    restart: unless-stopped

  # Log Aggregator - Loki + Promtail
  loki:
    image: grafana/loki:latest
    container_name: ruv-swarm-loki
    hostname: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mcp-test-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: ruv-swarm-promtail
    hostname: promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - ./logs:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - mcp-test-network
    restart: unless-stopped

  # Test Runner - Orchestrates test scenarios
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test-runner
    container_name: ruv-swarm-test-runner
    hostname: test-runner
    environment:
      - TEST_SUITE=mcp-reliability
      - RUN_DURATION=3600  # 1 hour
      - COLLECT_METRICS=true
      - GENERATE_REPORT=true
    volumes:
      - ./test-results:/app/test-results
      - ./scenarios:/app/scenarios:ro
      - ./reports:/app/reports
    depends_on:
      - mcp-server
      - claude-simulator
      - prometheus
      - grafana
    networks:
      - mcp-test-network
    command: >
      sh -c "
      echo 'Waiting for services to be ready...'
      sleep 30
      echo 'Starting MCP reliability test suite...'
      node /app/test-runner.js --suite mcp-reliability --duration 3600
      "

networks:
  mcp-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mcp-data:
  prometheus-data:
  grafana-data:
  loki-data: